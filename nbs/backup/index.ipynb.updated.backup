{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "from nbdev import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DPCT - Deep Perceptual Control Theory\n",
    "\n",
    "> A library for combining Deep Learning and Perceptual Control Theory reorganisation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview\n",
    "\n",
    "The DPCT library implements Deep Perceptual Control Theory, combining principles from Perceptual Control Theory (PCT) with deep learning techniques. The library provides tools for:\n",
    "\n",
    "1. Creating hierarchical control systems using neural networks\n",
    "2. Evolving populations of control systems\n",
    "3. Optimizing hyperparameters for control system architectures\n",
    "4. Integrating online learning within control systems\n",
    "\n",
    "DPCT is built on top of TensorFlow/Keras for neural networks, OpenAI Gym for environments, DEAP for evolutionary computation, and Optuna for hyperparameter optimization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Installation\n",
    "\n",
    "```bash\n",
    "pip install dpct\n",
    "```\n",
    "\n",
    "### Dependencies\n",
    "\n",
    "- tensorflow\n",
    "- gym\n",
    "- deap\n",
    "- numpy\n",
    "- matplotlib\n",
    "- optuna"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quick Start\n",
    "\n",
    "Here's a simple example of creating and using a DPCT individual:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide_output\n",
    "from dpct.individual import DHPCTIndividual\n",
    "import numpy as np\n",
    "\n",
    "# Create a simple control system for CartPole\n",
    "individual = DHPCTIndividual(\n",
    "    env_name=\"CartPole\",\n",
    "    gym_name=\"CartPole-v1\",\n",
    "    env_props={},\n",
    "    levels=[\n",
    "        {'units': 16},  # Level 1 with 16 units\n",
    "        {'units': 8}    # Level 2 with 8 units\n",
    "    ],\n",
    "    activation_funcs=['relu', 'tanh'],\n",
    "    weight_types=['glorot_uniform', 'glorot_uniform']\n",
    ")\n",
    "\n",
    "# Compile the individual (builds the environment and neural network)\n",
    "individual.compile()\n",
    "\n",
    "# Run the individual in the environment\n",
    "rewards = individual.run(episodes=3, render=False)\n",
    "print(f\"Rewards: {rewards}\")\n",
    "print(f\"Average reward: {np.mean(rewards)}\")\n",
    "\n",
    "# Run with online learning\n",
    "rewards_with_learning = individual.run(episodes=3, render=False, online_learning=True)\n",
    "print(f\"Rewards with online learning: {rewards_with_learning}\")\n",
    "print(f\"Average reward with learning: {np.mean(rewards_with_learning)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Key Components\n",
    "\n",
    "### DHPCTIndividual\n",
    "\n",
    "The core class that encapsulates a control system. It contains:\n",
    "\n",
    "- An environment (OpenAI Gym)\n",
    "- A neural network model (Keras) representing a PCT hierarchy\n",
    "- Methods for running, saving/loading, and evaluating the control system\n",
    "- Support for online learning within the control loop\n",
    "\n",
    "### DHPCTEvolver\n",
    "\n",
    "A class for evolving populations of DHPCTIndividual instances using genetic algorithms. Features include:\n",
    "\n",
    "- Population initialization from templates\n",
    "- Customizable selection, crossover, and mutation operators\n",
    "- Evolution statistics tracking\n",
    "- Saving and loading of evolution results\n",
    "\n",
    "### DHPCTOptimizer\n",
    "\n",
    "A class for optimizing hyperparameters of DHPCTIndividual architectures using Optuna. Features include:\n",
    "\n",
    "- Automated exploration of architecture configurations\n",
    "- Support for various search algorithms (TPE, CMA-ES, etc.)\n",
    "- Visualization of optimization results\n",
    "- Saving and loading of best parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Documentation\n",
    "\n",
    "The library is documented through detailed docstrings and example notebooks:\n",
    "\n",
    "- `02_individual.ipynb`: Documentation and implementation of DHPCTIndividual\n",
    "- `03_evolver.ipynb`: Documentation and implementation of DHPCTEvolver\n",
    "- `04_optimizer.ipynb`: Documentation and implementation of DHPCTOptimizer\n",
    "- `05_usage_example.ipynb`: Complete usage examples\n",
    "- `06_unit_tests.ipynb`: Unit tests for all components"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## License\n",
    "\n",
    "This project is licensed under the Apache 2.0 License - see the LICENSE file for details."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Perceptual Control Theory (DPCT) Library\n",
    "\n",
    "> A library for combining Deep Learning and Perceptual Control Theory reorganisation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview\n",
    "\n",
    "The Deep Perceptual Control Theory (DPCT) library is designed to evolve and train hierarchical control systems based on Perceptual Control Theory using TensorFlow/Keras models and evolutionary algorithms through DEAP.\n",
    "\n",
    "This library merges concepts from Deep Learning and PCT to create adaptable control hierarchies that can interface with various environments.\n",
    "\n",
    "## Installation\n",
    "\n",
    "```bash\n",
    "pip install dpct\n",
    "```\n",
    "\n",
    "Or install with required dependencies:\n",
    "\n",
    "```bash\n",
    "pip install \"dpct[all]\"\n",
    "```\n",
    "\n",
    "## Library Components\n",
    "\n",
    "The DPCT library consists of the following main components:\n",
    "\n",
    "1. **DHPCTIndividual**: Core class encapsulating an environment and Keras model representing a PCT hierarchy\n",
    "2. **DHPCTEvolver**: Class for evolving populations of individuals using DEAP\n",
    "3. **DHPCTOptimizer**: Class for optimizing hyperparameters of the evolution process using Optuna\n",
    "4. Online learning capabilities to train evolved control systems in real-time\n",
    "\n",
    "## Quick Start Example\n",
    "\n",
    "```python\n",
    "from dpct.individual import DHPCTIndividual\n",
    "from dpct.evolver import DHPCTEvolver\n",
    "\n",
    "# Create an individual for the CartPole environment\n",
    "individual = DHPCTIndividual(\n",
    "    env_name=\"CartPole\",\n",
    "    gym_name=\"CartPole-v1\",\n",
    "    env_props={\"render_mode\": \"rgb_array\"},\n",
    "    levels=[4, 3, 2]  # Hierarchy structure\n",
    ")\n",
    "\n",
    "# Compile and run the individual\n",
    "individual.compile()\n",
    "reward = individual.run(steps=100, early_termination=True)\n",
    "print(f\"Reward: {reward}\")\n",
    "\n",
    "# Define a fitness function for evolution\n",
    "def fitness_function(individual):\n",
    "    return -individual.evaluate(nevals=3)  # Negative for minimization\n",
    "\n",
    "# Create and run an evolver\n",
    "evolver = DHPCTEvolver(pop_size=20, generations=50)\n",
    "evolver.setup_evolution(individual, fitness_function)\n",
    "population, logbook, hof = evolver.run_evolution()\n",
    "\n",
    "# Get the best individual\n",
    "best_individual = hof[0]\n",
    "best_reward = best_individual.evaluate()\n",
    "print(f\"Best reward: {best_reward}\")\n",
    "```\n",
    "\n",
    "## Documentation\n",
    "\n",
    "For more detailed documentation and examples, please see the following notebooks:\n",
    "\n",
    "* [DHPCTIndividual](../individual): Core individual implementation\n",
    "* [DHPCTEvolver](../evolver): Evolution using DEAP\n",
    "* [DHPCTOptimizer](../optimizer): Hyperparameter optimization using Optuna\n",
    "* [Usage Examples](../usage_example): Complete examples showing how to use the library\n",
    "* [Unit Tests](../unit_tests): Unit tests for the library components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "python3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
